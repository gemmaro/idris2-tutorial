# Japanese translations for PACKAGE package
# Copyright (C) 2022 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-08-17 08:59+0900\n"
"PO-Revision-Date: 2022-08-17 09:13+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Title #
#: ../src/Appendices/Neovim.md:1
#, no-wrap
msgid "Interactive Editing in Neovim"
msgstr "対話的編集をNeovimで"

#. type: Plain text
#: ../src/Appendices/Neovim.md:10
msgid ""
"Idris provides extensive capabilities to interactively analyze the types of "
"values and expressions in our programs and fill out skeleton implementations "
"and sometimes even whole programs for us based on the types provided. These "
"interactive editing features are available via plugins in different "
"editors.  Since I am a Neovim user, I explain the Idris related parts of my "
"own setup in detail here."
msgstr ""
"Idrisには多岐にわたる機能があり、\n"
"プログラム中の値や式の型を対話的に分析したり、\n"
"実装の骨子、ときには与えられた型に基づいて全体のプログラムさえも、書き込んだ"
"りしてくれます。\n"
"これらの対話的な編集機能はそれぞれのエディタのプラグインを介して使うことがで"
"きます。\n"
"筆者はNeovim利用者なので自分の設定のうちIdrisに関係する部分をここで詳細に述べ"
"ます。"

#. type: Plain text
#: ../src/Appendices/Neovim.md:20
msgid ""
"The main component required to get all these features to run in Neovim is an "
"executable provided by the [idris2-lsp](https://github.com/idris-community/"
"idris2-lsp) project.  This executable makes use of the Idris compiler API "
"(application programming interface) internally and can check the syntax and "
"types of the source code we are working on. It communicates with Neovim via "
"the language server protocol (LSP). This communication is setup through the "
"[idris2-nvim](https://github.com/ShinKage/idris2-nvim)  plugin."
msgstr ""
"Neovimでこれら全ての機能を走らせるために必要な主要素は\n"
"[idris2-lsp](https://github.com/idris-community/idris2-lsp)\n"
"プロジェクトで提供されている実行プログラムです。\n"
"この実行プログラムは内部でIdrisのコンパイラAPI (application programming "
"interface) を活用して\n"
"編集中のソースコードの構文や型を検査することができます。\n"
"idris2-lspはlanguage server protocol (LSP) を介してNeovimと通信しています。\n"
"この通信は[idris2-nvim](https://github.com/ShinKage/idris2-nvim)プラグインを"
"通じて立ち上がります。"

#. type: Plain text
#: ../src/Appendices/Neovim.md:31
msgid ""
"As we will see in this tutorial, the `idris2-lsp` executable not only "
"supports syntax and type checking, but comes also with additional "
"interactive editing features. Finally, the Idris compiler API supports "
"semantic highlighting of Idris source code: Identifiers and keywords are "
"highlighted not only based on the language's syntax (that would be *syntax "
"highlighting*, a feature expected from all modern programming environments "
"and editors), but also based on their *semantics*. For instance, a local "
"variable in a function implementation gets highlighted differently than the "
"name of a top level function, although syntactically these are both just "
"identifiers."
msgstr ""
"このチュートリアルで見ていきますが、`idris2-lsp`実行プログラムは構文と型の検"
"査を行えるようにするだけではなく、\n"
"追加の対話的編集機能も備えています。\n"
"最後にIdrisコンパイラAPIはIdrisのソースコードの意味論的彩色をサポートしていま"
"す。\n"
"つまり、識別子やキーワードの彩色は、\n"
"言語の構文に基づくだけではなく（これは*構文彩色*であり、\n"
"あらゆる現代的なプログラミング環境やエディタにあるであろう機能です）、\n"
"その*意味論*にも基づいているのです。\n"
"例えば関数実装の局所変数と最上位関数の名前は、\n"
"どちらも構文的にはただの識別子ですが、それぞれ違うように彩色されます。"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:32
#, no-wrap
msgid ""
"module Appendices.Neovim\n"
"\n"
"import Data.Vect\n"
"\n"
"%default total\n"
msgstr ""
"module Appendices.Neovim\n"
"\n"
"import Data.Vect\n"
"\n"
"%default total\n"

#. type: Title ##
#: ../src/Appendices/Neovim.md:40
#, no-wrap
msgid "Setup"
msgstr "立ち上げ"

#. type: Plain text
#: ../src/Appendices/Neovim.md:44
msgid ""
"In order to make full use of interactive Idris editing in Neovim, at least "
"the following tools need to be installed:"
msgstr ""
"Neovimでの対話的なIdrisの編集方法を全部活用するには、\n"
"少なくとも以下のツールがインストールされている必要があります。"

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:52
msgid "A recent version of Neovim (version 0.5 or later)."
msgstr "新しめのバージョンのNeovim（バージョン0.5以降）"

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:52
msgid "A recent version of the Idris compiler (at least version 0.5.1)."
msgstr "新しめのバージョンのIdrisコンパイラ（最低でもバージョン0.5.1）"

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:52
msgid "The Idris compiler API."
msgstr "IdrisコンパイラのAPI"

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:52
msgid ""
"The [idris2-lsp](https://github.com/idris-community/idris2-lsp) package."
msgstr "[idris2-lsp](https://github.com/idris-community/idris2-lsp)パッケージ"

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:52
msgid "The following Neovim plugins:"
msgstr "以下のNeovimプラグイン"

#. type: Bullet: '  * '
#: ../src/Appendices/Neovim.md:52
msgid "[idris2-nvim](https://github.com/ShinKage/idris2-nvim)"
msgstr "[idris2-nvim](https://github.com/ShinKage/idris2-nvim)"

#. type: Bullet: '  * '
#: ../src/Appendices/Neovim.md:52
msgid "[nvim-lspconfig](https://github.com/neovim/nvim-lspconfig)"
msgstr "[nvim-lspconfig](https://github.com/neovim/nvim-lspconfig)"

#. type: Plain text
#: ../src/Appendices/Neovim.md:57
msgid ""
"The `idris2-lsp` project gives detailed instructions about how to install "
"Idris 2 together with its standard libraries and compiler API. Make sure to "
"follow these instructions so that your compiler and `idris2-lsp` executable "
"are in sync."
msgstr ""
"`idris2-lsp`プロジェクトにはIdris 2や標準ライブラリ、コンパイラAPIのインス"
"トール方法の詳細な説明があります。\n"
"この説明に従い、コンパイラと`idris2-lsp`実行プログラムが協調するようにしてく"
"ださい。"

#. type: Plain text
#: ../src/Appendices/Neovim.md:67
msgid ""
"If you are new to Neovim, you might want to use the `init.vim` file provided "
"in the `resources` folder. In that case, the necessary Neovim plugins are "
"already included, but you need to install [vim-plug](https://github.com/"
"junegunn/vim-plug), a plugin manager.  Afterwards, copy all or parts of "
"`resources/init.vim` to your own `init.vim` file. (Use `:help init.vim` from "
"within Neovim in order to find out where to look for this file.). After "
"setting up your `init.vim` file, restart Neovim and run `:PlugUpdate` to "
"install the necessary plugins."
msgstr ""
"Neovimが初めてであれば、`resources`フォルダにある`init.vim`ファイルを使うとよ"
"いかもしれません。\n"
"その場合必要なNeovimプラグインは既に含まれていますが、\n"
"[vim-plug](https://github.com/junegunn/vim-plug)というプラグイン管理をインス"
"トールする必要があります。\n"
"そのあとで自分の`iniv.vim`ファイルに`resources/init.vim`の全部または一部をコ"
"ピーしてください。\n"
"（Neovim内で`:help init.vim`とするとどこでこのファイルを見つけられるのかがわ"
"かります。）\n"
"`init.vim`ファイルを設定したあとはNeovimを再起動し\n"
"`:PlugUpdate`を走らせて必要なプラグインをインストールしてください。"

#. type: Title ##
#: ../src/Appendices/Neovim.md:68
#, no-wrap
msgid "A Typical Workflow"
msgstr "よくある作業の流れ"

#. type: Plain text
#: ../src/Appendices/Neovim.md:77
msgid ""
"In order to checkout the interactive editing features available to us, we "
"will reimplement some small utilities from the *Prelude*. To follow along, "
"you should have already worked through the [Introduction](../Tutorial/Intro."
"md), [Functions Part 1](../Tutorial/Functions1.md), and at least parts of "
"[Algebraic Data Types](../Tutorial/DataTypes.md), otherwise it will be hard "
"to understand what's going on here."
msgstr ""
"使える対話的編集機能を試すために、*Prelude*からいくらかの小間物を再実装してい"
"きます。\n"
"進めるにあたって既に[導入](../Tutorial/Intro.md)、[関数 その1](../Tutorial/"
"Function1.md)、\n"
"そして少なくとも[代数的データ型](../Tutorial/DataTypes.md)の一部を進めている"
"とよいです。\n"
"さもないとここで起こっていることが理解しづらいでしょう。"

#. type: Plain text
#: ../src/Appendices/Neovim.md:83
msgid ""
"Before we begin, note that the commands and actions shown in this tutorial "
"might not work correctly after you edited a source file but did not write "
"your changes to disk. Therefore, the first thing you should try if the "
"things described here do not work, is to quickly save the current file (`:"
"w`)."
msgstr ""
"始める前に注意しておきますが、\n"
"ソースファイルを編集してディスクに変更を書き込んでいなかったら、\n"
"このチュートリアルでお見せするコマンドやアクションは正しく動かないかもしれま"
"せん。\n"
"したがって、ここに載っていることがうまくいかなかったら、\n"
"最初に試すことは現在のファイルをささっと保存する (`:w`) ことです。"

#. type: Plain text
#: ../src/Appendices/Neovim.md:85
msgid "Let's start with negation of a boolean value:"
msgstr "真偽値の否定から始めましょう。"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:86
#, no-wrap
msgid "negate1 : Bool -> Bool\n"
msgstr "negate1 : Bool -> Bool\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:102
msgid ""
"Typically, when writing Idris code we follow the mantra \"types first\". "
"Although you might already have an idea about how to implement a certain "
"piece of functionality, you still need to provide an accurate type before "
"you can start writing your implementation. This means, when programming in "
"Idris, we have to mentally keep track of the implementation of an algorithm "
"and the types involved at the same time, both of which can become "
"arbitrarily complex. Or do we? Remember that Idris knows at least as much "
"about the variables and their types available in the current context of a "
"function implementation as we do, so we probably should ask it for guidance "
"instead of trying to do everything on our own."
msgstr ""
"Idrisのコードを書くときにつきものなのは「型第一」という真言に従うことです。\n"
"何らかの機能の一部をどのように実装すればよいかのアイディアがもうあるかもしれ"
"ませんが、\n"
"それでも実装を書き始められる前に正確な型を提供する必要があります。\n"
"つまり、Idrisでプログラミングするときは\n"
"頭の中でアルゴリズムの実装と関連する型について同時に帳尻を合わせなくてはいけ"
"ず、\n"
"両方ともどこまでも複雑になりうるものなのです。\n"
"それでも実装からやります？\n"
"覚えておいてほしいのですが、\n"
"Idrisは私達と同じように少なくとも関数実装の現在の文脈で使える変数とその型の多"
"くを知っているので、\n"
"全部自分で試す代わりに道しるべを乞うとよいでしょう。"

#. type: Plain text
#: ../src/Appendices/Neovim.md:112
#, no-wrap
msgid ""
"So, in order to proceed, we ask Idris for a skeleton function\n"
"body: In normal editor mode, move your cursor on the line where\n"
"`negate1` is declared and enter `<LocalLeader>a` in quick\n"
"succession. `<LocalLeader>` is a special key that can be specified\n"
"in the `init.vim` file. If you\n"
"use the `init.vim` from the `resources` folder, it is set to\n"
"the comma character (`,`), in which case the above command\n"
"consists of a comma quickly followed by the lowercase letter \"a\".\n"
"See also `:help leader` and `:help localleader` in Neovim\n"
msgstr ""
"で、話を続けるために、Idrisに関数本体の骨子について尋ねます。\n"
"通常の編集モードで`negate`が宣言されている行にカーソルを持っていき、\n"
"`<LocalLeader>a`を素早く連続で入力してください。\n"
"`<LocalLeader>`は特別なキーで`init.vim`ファイル中で指定することができます。\n"
"`resources`フォルダの`init.vim`を使っていたら、\n"
"コンマ文字 (`,`) に設定されています。\n"
"その場合上のコマンドは、コンマとそのすぐあとに小文字の \"a\" が続きます。\n"
"Neovimで`:help leader`と`:help localleader`もご参照ください。\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:115
msgid "Idris will generate a skeleton implementation similar to the following:"
msgstr "Idrisは以下のような実装の骨子を生成するでしょう。"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:116
#, no-wrap
msgid ""
"negate2 : Bool -> Bool\n"
"negate2 x = ?negate2_rhs\n"
msgstr ""
"negate2 : Bool -> Bool\n"
"negate2 x = ?negate2_rhs\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:139
#, no-wrap
msgid ""
"Note, that on the left hand side a new variable with name\n"
"`x` was introduced, while on the right hand side Idris\n"
"added a *metavariable* (also called a *hole*). This is an\n"
"identifier prefixed with a question mark. It signals to Idris,\n"
"that we will implement this part of the function at a later time.\n"
"The great thing about holes is, that we can *hover* over them\n"
"and inspect their types and the types of values in the\n"
"surrounding context. You can do so by placing the cursor\n"
"on the identifier of a hole and entering `K` (the uppercase letter) in\n"
"normal mode. This will open a popup displaying the type of\n"
"the variable under the cursor plus the types and quantities of the variables\n"
"in the surrounding context. You can also have this information\n"
"displayed in a separate window: Enter `<LocalLeader>so` to\n"
"open this window and repeat the hovering. The information will\n"
"appear in the new window and as an additional benefit, it will\n"
"be semantically highlighted. Enter `<LocalLeader>sc` to close\n"
"this window again. Go ahead and checkout the type and\n"
"context of `?negate2_rhs`.\n"
msgstr ""
"左側に`x`という名前の新しい変数が導入され、\n"
"右側にはIdrisが*メタ変数*（*穴開き*とも呼ばれます）を加えましたね。\n"
"後者は疑問符が前置された識別子です。\n"
"関数のこの部分をあとで実装するつもりがあることを、Idrisに合図しているのです。\n"
"穴開きの素晴しいところは、その上に*かざして*型や周囲の文脈の値の型を調べられることです。\n"
"そうするにはカーソルを穴開きの識別子の上に置いて通常モードで`K`（大文字）を入力します。\n"
"これでポップアップが開いてカーソルの下の変数の型に加えて周囲の文脈の変数の型と数量子が表示されます。\n"
"この表示された情報を分離した窓に移すこともできます。\n"
"`<LocalLeader>so`と入力するとこの窓を開きつつカーソルをかざしたままになります。\n"
"情報が新しい窓に現れますが、これには意味論的彩色される利点もあります。\n"
"`<LocalLeader>sc`と入力するとこの窓を閉じて元に戻ります。\n"
"さあ、`?negate2_rhs`の型と文脈を見てみましょう。\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:148
#, no-wrap
msgid ""
"Most functions in Idris are implemented by pattern matching\n"
"on one or more of the arguments. Idris,\n"
"knowing the data constructors of all non-primitive data types,\n"
"can write such pattern matches for us (a process also called\n"
"*case splitting*). To give this a try, move the cursor onto the `x`\n"
"in the skeleton implementation of `negate2`, and enter\n"
"`<LocalLeader>c` in normal mode. The result will look as\n"
"follows:\n"
msgstr ""
"Idrisのほとんどの関数は1つ以上の引数についてのパターン照合によって実装されています。\n"
"Idrisは全ての原始的でないデータ型のデータ構築子を知っており、\n"
"その通りにパターン照合を書いてくれます。\n"
"（この工程は*場合分割*とも呼ばれます。）\n"
"カーソルを`negate2`の実装の骨子中にある`x`の上に移動させて、\n"
"通常モードで`<LocalLeader>c`を入力してください。\n"
"結果は以下のようになるでしょう。\n"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:149
#, no-wrap
msgid ""
"negate3 : Bool -> Bool\n"
"negate3 False = ?negate3_rhs_0\n"
"negate3 True = ?negate3_rhs_1\n"
msgstr ""
"negate3 : Bool -> Bool\n"
"negate3 False = ?negate3_rhs_0\n"
"negate3 True = ?negate3_rhs_1\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:158
msgid ""
"As you can see, Idris inserted a hole for each of the cases on the right "
"hand side. We can again inspect their types or replace them with a proper "
"implementation directly."
msgstr ""
"見てとれるようにIdrisは右側のそれぞれの場合に穴開きを挿入しました。\n"
"再度それぞれの型を調べることもできますし、\n"
"直接適切な実装で置き換えることもできます。"

#. type: Plain text
#: ../src/Appendices/Neovim.md:164
msgid ""
"This concludes the introduction of the (in my opinion) core features of "
"interactive editing: Hovering on metavariables, adding skeleton function "
"implementations, and case splitting (which also works in case blocks and for "
"nested pattern matches). You should start using these all the time *now*!"
msgstr ""
"これが対話的編集の（筆者にとっての）中核の機能への入口だという結論になりま"
"す。\n"
"メタ変数にかざし、関数の実装の骨子を加え、場合分割する（これはcaseブロックと"
"入れ子のパターン照合でも動きます）。\n"
"これらを*今*この瞬間から使い始めるべきです！"

#. type: Title ##
#: ../src/Appendices/Neovim.md:165
#, no-wrap
msgid "Expression Search"
msgstr "式検索"

#. type: Plain text
#: ../src/Appendices/Neovim.md:173
msgid ""
"Sometimes, Idris knows enough about the types involved to come up with a "
"function implementation on its own. For instance, let us implement function "
"`either` from the *Prelude*.  After giving its type, creating a skeleton "
"implementation, and case splitting on the `Either` argument, we arrive at "
"something similar to the following:"
msgstr ""
"時々Idrisが充分関係する型について知っていて、自力で関数の実装を思い付けること"
"があります。\n"
"例えば*Prelude*の関数`either`を実装してみましょう。\n"
"型を与えたあと、実装の骨子をつくり、`Either`引数で場合分割すると、\n"
"以下のようなものに行き着きます。"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:174
#, no-wrap
msgid ""
"either2 : (a -> c) -> (b -> c) -> Either a b -> c\n"
"either2 f g (Left x) = ?either2_rhs_0\n"
"either2 f g (Right x) = ?either2_rhs_1\n"
msgstr ""
"either2 : (a -> c) -> (b -> c) -> Either a b -> c\n"
"either2 f g (Left x) = ?either2_rhs_0\n"
"either2 f g (Right x) = ?either2_rhs_1\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:186
#, no-wrap
msgid ""
"Idris can come up with expressions for the two metavariables\n"
"on its own, because the types are specific enough. Move\n"
"the cursor onto one of the metavariables and enter\n"
"`<LocalLeader>o` in normal mode. You will be given\n"
"a selection of possible expressions (only one in this case),\n"
"of which you can choose a fitting one (or abort with `q`).\n"
msgstr ""
"Idrisは自力で2つのメタ変数の式を思い付くことができますが、\n"
"これは型が充分に限定されているからです。\n"
"カーソルをメタ変数の1つの上に移動させ、\n"
"通常モードで`<LocalLeader>o`を入力してください。\n"
"すると可能な式の骨子（今回の場合は1つのみ）が得られ、\n"
"この中から合うものを選べます（もしくは`q`で中断）。\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:190
msgid ""
"Here is another example: A reimplementation of function `maybe`.  If you run "
"an expression search on `?maybe2_rhs1`, you will get a larger list of "
"choices."
msgstr ""
"以下は別の例で、関数`maybe`の再実装です。\n"
"`?maybe2_rhs1`で式検索を走らせるともっと選択肢が多くなります。"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:191
#, no-wrap
msgid ""
"maybe2 : b -> (a -> b) -> Maybe a -> b\n"
"maybe2 x f Nothing = x\n"
"maybe2 x f (Just y) = ?maybe2_rhs_1\n"
msgstr ""
"maybe2 : b -> (a -> b) -> Maybe a -> b\n"
"maybe2 x f Nothing = x\n"
"maybe2 x f (Just y) = ?maybe2_rhs_1\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:208
#, no-wrap
msgid ""
"Idris is also sometimes capable of coming up with complete function\n"
"implementations based on a function's type. For this to work well\n"
"in practice, the number of possible implementations satisfying\n"
"the type checker must be pretty small. As an example, here is\n"
"function `zipWith` for vectors. You might not have heard\n"
"about vectors yet: They will be introduced in the chapter about\n"
"[dependent types](../Tutorial/Dependent.md). You can still give\n"
"this a go to check out its effect. Just move the cursor on the\n"
"line declaring `zipWithV`, enter `<LocalLeader>gd` and select the first option.\n"
"This will automatically generate the whole function body including\n"
"case splits and implementations.\n"
msgstr ""
"Idrisは時々関数の型に基づいて完全な関数の実装を思い付けることもあります。\n"
"これが実際にうまくいくのは型検査を満足する可能な実装が充分に少なくなければいけません。\n"
"例として以下は関数`zipWith`のベクタ用のものです。\n"
"ベクタについてまだ聞いたことがないかもしれませんが、\n"
"これは[依存型](../Tutorial/Dependent.md)についての章で紹介されます。\n"
"それでも式検索の効果を確認するために試してみることはできます。\n"
"`zipWithV`を宣言している行にカーソルを移動させ、\n"
"`<LocalLeader>gd`を入力して最初の選択肢を選ぶ、それだけです。\n"
"こうすると自動的に場合分割と実装を含む関数全体が生成されます。\n"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:209
#, no-wrap
msgid "zipWithV : (a -> b -> c) -> Vect n a -> Vect n b -> Vect n c\n"
msgstr "zipWithV : (a -> b -> c) -> Vect n a -> Vect n b -> Vect n c\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:218
#, no-wrap
msgid ""
"Expression search only works well if the types are specific\n"
"enough. If you feel like that might be the case, go ahead\n"
"and give it a go, either by running `<LocalLeader>o` on\n"
"a metavariable, or by trying `<LocalLeader>gd` on a\n"
"function declaration.\n"
msgstr ""
"式検索は充分に特化された型のときにのみうまくいきます。\n"
"今がそのときだと思ったら、\n"
"`<LocalLeader>o`をメタ変数の上で走らせるか、\n"
"`<LocalLeader>gd`を関数制限の上で試してみるか、\n"
"どちらかをぜひやってみてください。\n"

#. type: Title ##
#: ../src/Appendices/Neovim.md:219
#, no-wrap
msgid "More Code Actions"
msgstr "もっとコードアクション"

#. type: Plain text
#: ../src/Appendices/Neovim.md:223
msgid ""
"There are other shortcuts available for generating part of your code, two of "
"which I'll explain here."
msgstr ""
"他にもコードの一部を生成することができるショートカットがあり、\n"
"そのうち2つをここで述べます。"

#. type: Plain text
#: ../src/Appendices/Neovim.md:231
#, no-wrap
msgid ""
"First, it is possible to add a new case block by entering\n"
"`<LocalLeader>mc` in normal mode when on a metavariable.\n"
"For instance, here is part of an implementation of `filterList`,\n"
"which appears in an exercise in the chapter about\n"
"algebraic data types. I arrived at this by letting Idris\n"
"generate a skeleton implementation followed by a case split\n"
"and an expression search on the first metavariable:\n"
msgstr ""
"1つ目として、通常モードのときにメタ変数上で`<LocalLeader>mc`を入力することで新しいcaseブロックを加えられます。\n"
"例えば以下は代数的データ型についての章の中の演習で登場する`filterList`の実装の一部です。\n"
"ここまで辿り着くのに、Idrisに実装の骨子の生成、\n"
"場合分割、最初のメタ変数での式検索をしてもらったところです。\n"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:232
#, no-wrap
msgid ""
"filterList : (a -> Bool) -> List a -> List a\n"
"filterList f [] = []\n"
"filterList f (x :: xs) = ?filterList_rhs_1\n"
msgstr ""
"filterList : (a -> Bool) -> List a -> List a\n"
"filterList f [] = []\n"
"filterList f (x :: xs) = ?filterList_rhs_1\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:247
#, no-wrap
msgid ""
"We will next have to pattern match on the result of applying\n"
"`x` to `f`. Idris can introduce a new case block for us,\n"
"if we move the cursor onto metavariable `?filterList_rhs_1`\n"
"and enter `<LocalLeader>mc` in normal mode. We can then\n"
"continue with our implementation by first giving the\n"
"expression to use in the case block (`f x`) followed by a\n"
"case split on the new variable in the case block.\n"
"This will lead us to an implementation similar to the following\n"
"(I had to fix the indentation, though):\n"
msgstr ""
"次に`x`を`f`に適用した結果をパターン照合しなければいけません。\n"
"カーソルをメタ変数`?filterList_rhs_1`の上に持っていき、\n"
"通常モードで`<LocalLeader>mc`と入力すれば、\n"
"Idrisは新しいcaseブロックを導入してくれます。\n"
"それから、まず式 (`f x`) をcaseブロックで使えるように与えて、\n"
"次にcaseブロック中の新しい変数上で場合分割して実装を続けられます。\n"
"これにより以下のような実装になります。\n"
"（ただし字下げは修正せねばなりませんでしたが。）\n"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:248
#, no-wrap
msgid ""
"filterList2 : (a -> Bool) -> List a -> List a\n"
"filterList2 f [] = []\n"
"filterList2 f (x :: xs) = case f x of\n"
"  False => ?filterList2_rhs_2\n"
"  True => ?filterList2_rhs_3\n"
msgstr ""
"filterList2 : (a -> Bool) -> List a -> List a\n"
"filterList2 f [] = []\n"
"filterList2 f (x :: xs) = case f x of\n"
"  False => ?filterList2_rhs_2\n"
"  True => ?filterList2_rhs_3\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:266
#, no-wrap
msgid ""
"Sometimes, we want to extract a utility function from\n"
"an implementation we are working on. For instance, this is often\n"
"useful or even necessary when we write proofs about our code\n"
"(see chapters [Propositional Equality](../Tutorial/Eq.md)\n"
"and [Predicates](../Tutorial/Predicates.md), for instance).\n"
"In order to do so, we can move the cursor on a metavariable,\n"
"and enter `<LocalLeader>ml`. Give this a try with\n"
"`?whatNow` in the following example (this will work better\n"
"in a regular Idris source file instead of the literate\n"
"file I use for this tutorial):\n"
msgstr ""
"時々、作業中の実装から小間物関数を取り出したいことがあります。\n"
"例えばこれは、コードについての証明を書くときに、よく便利だったり果ては必要だったりします。\n"
"（[命題の等価性](../Tutorial/Eq.md)や[前提条件](../Tutorial/Predicates.md)などの章を見てください。）\n"
"そうするためにはカーソルをメタ変数の上に移動させて`<LocalLeader>ml`と入力すればできます。\n"
"以下の例の`?whatNow`で試してみてください。\n"
"（これは通常のIdrisのソースファイルのほうが、\n"
"私がこのチュートリアルで使用している文芸的ファイルよりもうまくいくでしょう。）\n"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:267
#, no-wrap
msgid ""
"traverseEither : (a -> Either e b) -> List a -> Either e (List b)\n"
"traverseEither f [] = Right []\n"
"traverseEither f (x :: xs) = ?whatNow x xs f (f x) (traverseEither f xs)\n"
msgstr ""
"traverseEither : (a -> Either e b) -> List a -> Either e (List b)\n"
"traverseEither f [] = Right []\n"
"traverseEither f (x :: xs) = ?whatNow x xs f (f x) (traverseEither f xs)\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:279
msgid ""
"Idris will create a new function declaration with the type and name of `?"
"whatNow`, which takes as arguments all variables currently in scope. It also "
"replaces the hole in `traverseEither` with a call to this new function. "
"Typically, you will have to manually remove unneeded arguments afterwards. "
"This led me to the following version:"
msgstr ""
"Idrisは`?whatNow`の型と名前を持つ新しい関数宣言を作ります。\n"
"作られた関数は現在範疇にある全ての変数を引数として取ります。\n"
"また、`traverseEither`中の穴開きをこの新しい関数の呼び出しで置き換えます。\n"
"大抵はその後に手ずから不要な引数を削除しなければいけないでしょう。\n"
"こうすると以下の版に行き着きます。"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:280
#, no-wrap
msgid ""
"whatNow2 : Either e b -> Either e (List b) -> Either e (List b)\n"
"\n"
"traverseEither2 : (a -> Either e b) -> List a -> Either e (List b)\n"
"traverseEither2 f [] = Right []\n"
"traverseEither2 f (x :: xs) = whatNow2 (f x) (traverseEither f xs)\n"
msgstr ""
"whatNow2 : Either e b -> Either e (List b) -> Either e (List b)\n"
"\n"
"traverseEither2 : (a -> Either e b) -> List a -> Either e (List b)\n"
"traverseEither2 f [] = Right []\n"
"traverseEither2 f (x :: xs) = whatNow2 (f x) (traverseEither f xs)\n"

#. type: Title ##
#: ../src/Appendices/Neovim.md:288
#, no-wrap
msgid "Getting Information"
msgstr "情報を得る"

#. type: Plain text
#: ../src/Appendices/Neovim.md:294
msgid ""
"The `idris2-lsp` executable and through it, the `idris2-nvim` plugin, not "
"only supports the code actions described above. Here is a non-comprehensive "
"list of other capabilities. I suggest you try out each of them from within "
"this source file."
msgstr ""
"`idris2-lsp`実行プログラムと介在する`idris2-nvim`プラグインがサポートしている"
"のは、\n"
"上で述べたコードアクションだけではありません。\n"
"以下は他の機能の非網羅的な一覧です。\n"
"それぞれをこのソースファイルの中で試してみてください。"

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `K` when on an identifier or operator in normal mode shows its type "
"and namespace (if any). In case of a metavariable, variables in the current "
"context are displayed as well together with their types and quantities "
"(quantities will be explained in [Functions Part 2](../Tutorial/Functions2."
"md)).  If you don't like popups, enter `<LocalLeader>so` to open a new "
"window where this information is displayed and semantically highlighted "
"instead."
msgstr ""
"識別子や演算子の上にいるとき通常モードで`K`と打つと（もしあれば）型と名前空間"
"が出ます。\n"
"メタ変数の場合は現在の文脈も型と数量子とともに表示されます。\n"
"（数量子は[関数 その2](../Tutorial/Functions2.md)で説明されます。）\n"
"ポップアップが好きでなければ、`<LocalLeader>so`とすると代わりに新しい窓が開"
"き、\n"
"この情報が意味論的彩色されて表示されます。"

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `gd` on a function, operator, data constructor or type constructor in "
"normal mode jumps to the item's definition.  For external modules, this "
"works only if the module in question has been installed together with its "
"source code (by using the `idris2 --install-with-src` command)."
msgstr ""
"通常モードで、関数、演算子、データ構築子、型構築子の上にいるとき`gd`と打つ"
"と、その定義に飛びます。\n"
"外部モジュールの場合、これは対象のモジュールがソースコードと一緒にインストー"
"ルされているときにのみ機能します。\n"
"（ソースコードのインストールには`idris2 --install-with-src`コマンドを使いま"
"す。）"

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `<LocalLeader>mm` opens a popup window listing all metavariables in "
"the current module. You can place the cursor on an entry and jump to its "
"location by pressing `<Enter>`."
msgstr ""
"`<LocalLeader>mm`と打つと、ポップアップ窓を開いて現在のモジュール中の全てのメ"
"タ変数を一覧にします。\n"
"カーソルを項目の上に置いて`<Enter>`を押せばその場所に飛ぶことができます。"

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `<LocalLeader>mn` (or `<LocalLeader>mp`) jumps to the next (or "
"previous) metavariable in the current module."
msgstr ""
"`<LocalLeader>mn` (`<LocalLeader>mp`) と打つと現在のモジュール中の次（前）の"
"メタ変数に飛びます。"

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `<LocalLeader>br` opens a popup where you can enter a namespace. "
"Idris will then show all functions (plus their types)  exported from that "
"namespace in a popup window, and you can jump to a function's definition by "
"pressing enter on one of the entries. Note: The module in question must be "
"imported in the current source file."
msgstr ""
"`<LocalLeader>br`と打つとポップアップが開き、そこに名前空間を入力できます。\n"
"そうするとIdrisはポップアップ窓の中にその名前空間から輸出されている全ての関数"
"（とその型）を出し、\n"
"項目のうち1つの上でエンターを押すと関数の定義に飛ぶことができます。\n"
"なお、モジュールは現在のソースファイルでインポートされていなくてはいけませ"
"ん。"

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `<LocalLeader>x` opens a popup where you can enter a REPL command or "
"Idris expression, and the plugin will reply with a response from the REPL. "
"Whenever REPL examples are shown in the main part of this guide, you can try "
"them from within Neovim with this shortcut if you like."
msgstr ""
"`<LocalLeader>x`と打つと、ポップアップが開いてREPLコマンドやIdrisの式を入力で"
"き、\n"
"プラグインはREPLからの応答で返信します。\n"
"この導入書の主部にあるREPLの例については、いつでもNeovimからこのショートカッ"
"トをで試すことができますよ。"

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `<LocalLeader><LocalLeader>e` will display the error message from the "
"current line in a popup window. This can be highly useful, if error messages "
"are too long to fit on a single line. Likewise, "
"`<LocalLeader><LocalLeader>el` will list all error messages from the current "
"buffer in a new window. You can then select an error message and jump to its "
"origin by pressing `<Enter>`."
msgstr ""
"`<LocalLeader><LocalLeader>e`と打つと現在の行からのエラー文言をポップアップ窓"
"に表示します。\n"
"これはエラー文言が1行に収まらないほどに長すぎるときに大変便利です。\n"
"同様に`<LocalLeader><LocalLeader>el`は新しい窓で現在のバッファからの全てのエ"
"ラー文言を一覧にします。\n"
"エラー文言を選択して`<Enter>`を押すとその出自に飛ぶことができます。"

#. type: Plain text
#: ../src/Appendices/Neovim.md:332
msgid ""
"Other use cases and examples are described on the GitHub page of the `idris2-"
"nvim` plugin and can be included as described there."
msgstr ""
"他のユースケースや例は`idris2-nvim`プラグインのGitHubのページで記述されてお"
"り、\n"
"そちらで記述されているように設定に含められます。"

#. type: Title ##
#: ../src/Appendices/Neovim.md:333
#, no-wrap
msgid "The `%name` Pragma"
msgstr "`%name`プラグマ"

#. type: Plain text
#: ../src/Appendices/Neovim.md:345
#, no-wrap
msgid ""
"When you ask Idris for a skeleton implementation with `<LocalLeader>a`\n"
"or a case split with `<LocalLeader>c`,\n"
"it has to decide on what names to use for the new variables it introduces.\n"
"If these variables already have predefined names (from the function's\n"
"signature, record fields, or named data constructor arguments),\n"
"those names will be used, but\n"
"otherwise Idris will as a default use names `x`, `y`, and `z`, followed\n"
"by other letters. You can change this default behavior by\n"
"specifying a list of names to use for such occasions for any\n"
"data type.\n"
msgstr ""
"Idrisに`<LocalLeader>a`で実装の骨子を尋ねたり`<LocalLeader>c`で場合分割したりしたとき、\n"
"Idrisは導入する新しい変数にどの名前を使うべきかを決めなくてはなりません。\n"
"もしこの変数が既に事前に定義された名前（関数の処方、レコードフィールド、名前付きのデータ構築子の引数）だったら、\n"
"その名前が使われるでしょうが、そうでないときは既定で`x`、`y`、`z`や他の文字を使います。\n"
"この既定の振舞いは変えることができ、\n"
"どんなデータ型についてもそのような状況で使うべき名前の一覧を指定することができます。\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:347
msgid "For instance:"
msgstr "例えば以下です。"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:348
#, no-wrap
msgid ""
"data Element = H | He | C | N | O | F | Ne\n"
"\n"
"%name Element e,f\n"
msgstr ""
"data Element = H | He | C | N | O | F | Ne\n"
"\n"
"%name Element e,f\n"

#. type: Plain text
#: ../src/Appendices/Neovim.md:358
msgid ""
"Idris will then use these names (followed by these names postfixed with "
"increasing integers), when it has to come up with variable names of this "
"type on its own. For instance, here is a test function and the result of "
"adding a skeleton definition to it:"
msgstr ""
"そしてIdrisはこの型の変数名を自分で思い付かなければいけないときに、\n"
"この名前（この名前に続いて適宜増加させた整数を後置します）を使います。\n"
"例えば以下はお試しの関数で、定義の骨子を加えたものです。"

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:359
#, no-wrap
msgid ""
"test : Element -> Element -> Element -> Element -> Element -> Element\n"
"test e f e1 f1 e2 = ?test_rhs\n"
msgstr ""
"test : Element -> Element -> Element -> Element -> Element -> Element\n"
"test e f e1 f1 e2 = ?test_rhs\n"

#. type: Title ##
#: ../src/Appendices/Neovim.md:364 ../src/Tutorial/DPair.md:1191
#: ../src/Tutorial/DataTypes.md:1319 ../src/Tutorial/Dependent.md:872
#: ../src/Tutorial/Eq.md:1085 ../src/Tutorial/Folds.md:1051
#: ../src/Tutorial/Functions1.md:524 ../src/Tutorial/Functions2.md:924
#: ../src/Tutorial/Functor.md:1395 ../src/Tutorial/IO.md:1095
#: ../src/Tutorial/Interfaces.md:792 ../src/Tutorial/Predicates.md:1358
#: ../src/Tutorial/Traverse.md:1109
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: ../src/Appendices/Neovim.md:372
msgid ""
"Neovim, together with the `idris2-lsp` executable and the `idris2-nvim` "
"editor plugin, provides extensive utilities for interactive editing when "
"programming in Idris. Similar functionality is available for some other "
"editors, so feel free to ask what's available for your editor of choice, for "
"instance on the [Idris 2 Discord channel](https://discord.gg/UX68fDs2jc)."
msgstr ""
"`idris2-lsp`実行プログラムと`idris2-nvim`エディタプラグインを備えたNeovim"
"は、\n"
"Idrisでのプログラミングをする際に対話的編集のための豊富な小間物を提供しま"
"す。\n"
"似た機能は別のエディタで利用できるので、\n"
"読者の選んだエディタでどんなことができるのか\n"
"[Idris 2 Discordチャンネル](https://discord.gg/UX68fDs2jc)で気軽に尋ねてくだ"
"さい。"

#. type: Plain text
#: ../src/Appendices/Neovim.md:374 ../src/Tutorial/DPair.md:1206
#: ../src/Tutorial/DataTypes.md:1368 ../src/Tutorial/Dependent.md:910
#: ../src/Tutorial/Eq.md:1098 ../src/Tutorial/Folds.md:1064
#: ../src/Tutorial/Functions1.md:583 ../src/Tutorial/Functions2.md:964
#: ../src/Tutorial/Functor.md:1427 ../src/Tutorial/IO.md:1125
#: ../src/Tutorial/Interfaces.md:821 ../src/Tutorial/Predicates.md:1369
#: ../src/Tutorial/Prim.md:1411 ../src/Tutorial/Traverse.md:1148
#, no-wrap
msgid ""
"<!-- vi: filetype=idris2\n"
"-->\n"
msgstr ""
"<!-- vi: filetype=idris2\n"
"-->\n"
